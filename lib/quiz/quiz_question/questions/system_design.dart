import 'dart:convert';

class SystemDesignQuestions {
  int index = 0;

  List questions = [
    json.decode('{"title":"Best Database for Hierarchical Data","question":"Which database type is best suited for handling hierarchical data, such as organizational structures?","possible_answers":{"A":"Relational Database","B":"Key-Value Store","C":"Document Database","D":"Graph Database"},"answer_percentages":{"A":15.0,"B":28.0,"C":2.0,"D":55.0},"right_answer":"D","topic_name":"Database Types","description_and_explanation":"Graph databases are designed to store and navigate relationships in a natural and efficient way, making them ideal for hierarchical data structures.","difficulty_level":"Medium","pro_tip":"When dealing with complex, interconnected data, graph databases can significantly simplify your queries.","fun_fact":"Graph databases are used by social networks to map users connections efficiently."}'),
    json.decode('{"title":"Role of Load Balancers","question":"What is the primary purpose of a load balancer in a distributed system?","possible_answers":{"A":"To distribute network traffic across multiple servers","B":"To increase the storage capacity of the system","C":"To manage the database connections","D":"To monitor the performance of applications"},"answer_percentages":{"A":62.0,"B":5.0,"C":18.0,"D":15.0},"right_answer":"A","topic_name":"Load Balancing","description_and_explanation":"A load balancer is crucial in distributed system architectures, efficiently distributing incoming network traffic across multiple backend servers to enhance responsiveness and availability of applications. It functions as a reverse proxy, optimizing resource use by managing traffic loads and potentially performing tasks like session persistence and SSL termination.","difficulty_level":"Medium","pro_tip":"Consider the load balancing algorithm like round-robin, IP-hash, or least connections, to ensure optimal distribution suited to your application\'s needs.","fun_fact":"The concept of load balancing has evolved significantly since the 1980s with the advent of cloud computing and the rise in web traffic."}'),
    json.decode('{"title":"Benefits of Caching","question":"What is the primary benefit of implementing caching in a web application?","possible_answers":{"A":"To increase data processing time","B":"To reduce database load","C":"To enhance security measures","D":"To simplify the application code"},"answer_percentages":{"A":10.0,"B":70.0,"C":5.0,"D":15.0},"right_answer":"B","topic_name":"Caching","description_and_explanation":"Caching is a technique used in software architecture to store frequently accessed data in a temporary storage area, making it faster to retrieve. By reducing the number of direct queries to the database, caching alleviates the load and enhances the overall performance of the application.","difficulty_level":"Easy","pro_tip":"Use caching to handle high read scenarios effectively.","fun_fact":"Caching strategies evolved from simple memory-based to complex distributed caching."}'),
    json.decode('{"title":"Saga Pattern in Microservices","question":"Which pattern is commonly used to manage database transactions across multiple services in a microservices architecture?","possible_answers":{"A":"API Gateway","B":"Circuit Breaker","C":"Saga","D":"Service Registry"},"answer_percentages":{"A":15.0,"B":10.0,"C":60.0,"D":15.0},"right_answer":"C","topic_name":"Microservices","description_and_explanation":"The Saga pattern is an architectural pattern which provides a method to manage data consistency across services in microservices architecture by using a sequence of local transactions. Each local transaction updates the database and triggers the next step in the saga.","difficulty_level":"Medium","pro_tip":"Implement compensating transactions in sagas to handle failures gracefully.","fun_fact":"The term \'saga\' in computing is derived from the long narratives of heroic achievements common in medieval literature."}'),
    json.decode('{"title":"Reducing Read Latency with Geo-replication","question":"Which technique is most effective for reducing read latency in a globally distributed application?","possible_answers":{"A":"Data sharding","B":"Vertical scaling","C":"Write-through caching","D":"Geo-replication"},"answer_percentages":{"A":18.0,"B":5.0,"C":12.0,"D":65.0},"right_answer":"D","topic_name":"Data Distribution","description_and_explanation":"Geo-replication involves replicating data across multiple geographic locations to ensure data availability and durability. This approach significantly reduces read latency by allowing users to access data from the closest location, thereby enhancing user experience in a globally distributed application.","difficulty_level":"Hard","pro_tip":"For global user bases, implement geo-replication to improve performance and reduce latency.","fun_fact":"Major streaming services use geo-replication to deliver content quickly to users around the world."}'),
    json.decode('{"title":"OLTP Suitable Databases","question":"Which type of database is best suited for online transaction processing (OLTP)?","possible_answers":{"A":"Document store","B":"Graph database","C":"Relational database","D":"Data warehouse"},"answer_percentages":{"A":5.0,"B":5.0,"C":85.0,"D":5.0},"right_answer":"C","topic_name":"Database Systems","description_and_explanation":"Relational databases are ideal for online transaction processing (OLTP) due to their ability to handle a large number of transactions per second. Their structured query language (SQL) is highly effective for managing transactional data and ensuring data integrity across transactions.","difficulty_level":"Easy","pro_tip":"Optimize your SQL queries and database indexing to improve OLTP performance.","fun_fact":"The first commercial relational database was released by Oracle in 1979."}'),
    json.decode('{"title":"Web Application Firewall (WAF) Usage","question":"What is the main purpose of using a Web Application Firewall (WAF)?","possible_answers":{"A":"To balance load between servers","B":"To enhance application performance","C":"To protect against web attacks","D":"To provide SSL offloading"},"answer_percentages":{"A":5.0,"B":10.0,"C":80.0,"D":5.0},"right_answer":"C","topic_name":"Security","description_and_explanation":"A Web Application Firewall (WAF) is designed to protect web applications by filtering and monitoring HTTP traffic between a web application and the Internet. It is primarily used to protect web applications from various security threats such as SQL injection, cross-site scripting (XSS), and file inclusion.","difficulty_level":"Medium","pro_tip":"Regularly update your WAF rules to adapt to new vulnerabilities.","fun_fact":"The concept of a firewall in computing was first introduced in the late 1980s."}'),
    json.decode('{"title":"RESTful APIs in Web Services","question":"What is the primary purpose of using RESTful APIs in web services?","possible_answers":{"A":"To secure web services","B":"To standardize requests and responses","C":"To provide stateful interactions","D":"To reduce the use of JSON"},"answer_percentages":{"A":10.0,"B":65.0,"C":10.0,"D":15.0},"right_answer":"B","topic_name":"API Design","description_and_explanation":"RESTful APIs are designed to use standard HTTP methods and a stateless communication protocol, which helps in standardizing interactions between clients and servers. This approach simplifies development and increases the scalability of web services by allowing systems to communicate over the internet without retaining state between requests.","difficulty_level":"Easy","pro_tip":"Utilize HTTP verbs appropriately to clarify the intention of API requests.","fun_fact":"REST stands for Representational State Transfer, coined by computer scientist Roy Fielding in 2000."}'),
    json.decode('{"title":"Dynamic Load Balancing","question":"Which load balancing algorithm dynamically assigns more traffic to less busy servers?","possible_answers":{"A":"Round Robin","B":"Least Connection","C":"IP Hash","D":"Random"},"answer_percentages":{"A":25.0,"B":40.0,"C":20.0,"D":15.0},"right_answer":"B","topic_name":"Load Balancing Techniques","description_and_explanation":"The Least Connection method is a dynamic load balancing algorithm that routes client requests to the server with the fewest active connections. This is particularly effective in environments where server loads are not uniform or predictable, as it helps in optimizing resource utilization and reducing response time.","difficulty_level":"Medium","pro_tip":"Monitor server load continuously to make the Least Connection method more effective.","fun_fact":"Load balancers often combine multiple algorithms to handle different types of traffic scenarios."}'),
    json.decode('{"title":"Strong Consistency in Distributed Systems","question":"In a distributed database system, which consistency model ensures that once a new value is written, all subsequent read operations will return that value?","possible_answers":{"A":"Eventual Consistency","B":"Strong Consistency","C":"Causal Consistency","D":"Sequential Consistency"},"answer_percentages":{"A":10.0,"B":70.0,"C":10.0,"D":10.0},"right_answer":"B","topic_name":"Data Consistency Models","description_and_explanation":"Strong Consistency is the strictest model in distributed systems, ensuring that any read operation retrieves the most recent write operation from any point in the network. This model is crucial for applications requiring high levels of accuracy and real-time data processing, such as financial services.","difficulty_level":"Hard","pro_tip":"Design systems with a trade-off between consistency, availability, and partition tolerance based on application needs.","fun_fact":"The CAP Theorem, proposed by Eric Brewer, states that a distributed system can\'t simultaneously guarantee consistency, availability, and partition tolerance."}'),
    json.decode('{"title":"Virtual Machines in Cloud Computing","question":"What is the primary advantage of using virtual machines (VMs) in cloud computing?","possible_answers":{"A":"Increased security by physical isolation","B":"Reduced hardware costs","C":"Improved network speed","D":"Simplified software updates"},"answer_percentages":{"A":5.0,"B":75.0,"C":5.0,"D":15.0},"right_answer":"B","topic_name":"Virtualization","description_and_explanation":"Virtual machines allow multiple instances to run on a single physical server, effectively reducing hardware costs by maximizing resource utilization. VMs enable cloud providers to deploy scalable services quickly and efficiently, offering significant savings on physical infrastructure.","difficulty_level":"Easy","pro_tip":"Use virtualization to test new environments and backup systems without additional hardware investments.","fun_fact":"The concept of virtualization was first introduced in the 1960s to partition large mainframe computers."}'),
    json.decode('{"title":"DNS-based Service Discovery","question":"Which service discovery technique is widely used in microservices architectures to manage services dynamically?","possible_answers":{"A":"Static registration","B":"Dynamic registration","C":"DNS-based discovery","D":"Hard-coded service endpoints"},"answer_percentages":{"A":10.0,"B":15.0,"C":60.0,"D":15.0},"right_answer":"C","topic_name":"Service Discovery","description_and_explanation":"DNS-based discovery is a common method in microservices for locating and interacting with services. It simplifies the process of scaling and managing services by using DNS queries to resolve service names to network addresses, facilitating flexible service management and discovery in dynamic environments.","difficulty_level":"Medium","pro_tip":"Leverage DNS caching for enhanced performance and reduced DNS query overhead.","fun_fact":"DNS was originally designed for naming computers and services on the Internet, and has been adapted for microservices architectures."}')
  ];

  SystemDesignQuestions._privateConstructor();
  static final SystemDesignQuestions _instance = SystemDesignQuestions._privateConstructor();

  factory SystemDesignQuestions() {
    return _instance;
  }

  getNextQuestion() {
    index = (index == questions.length - 1) ? 0 : index + 1;
    return questions[index];
  }

  getNextQuestionsList(int count) {
    index = (index == questions.length - 1) ? 0 : index + 1;
    var questionsList = [];
    for(int i = index; i < count; i ++) {
      questionsList.add(questions[index]);
      index = (index == questions.length - 1) ? 0 : index + 1;
    }
    return questionsList;
  }
}
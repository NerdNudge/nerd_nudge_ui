import 'dart:convert';

class JavaQuestions {
  int index = 0;

  List questions = [
    json.decode('{"title":"Final Keyword in Java","question":"What is the purpose of the `final` keyword in Java?","possible_answers":{"A":"To create a new thread","B":"To define constants","C":"To terminate loops","D":"To catch exceptions"},"answer_percentages":{"A":5.0,"B":85.0,"C":5.0,"D":5.0},"right_answer":"B","topic_name":"Java Basics","description_and_explanation":"In Java, the `final` keyword is used to declare constants, prevent method overriding, and avoid inheritance. When a variable is declared with `final`, its value cannot be modified, essentially making it a constant.","difficulty_level":"Easy","pro_tip":"Use `final` to define values that should not change once they are initialized and to make your intentions clear regarding method overriding and class inheritance.","fun_fact":"Using `final` can also lead to performance optimizations at the JVM level due to its immutability guarantees."}'),
    json.decode('{"title":"Platform Independence in Java","question":"How does Java achieve platform independence?","possible_answers":{"A":"Through the use of JVM (Java Virtual Machine)","B":"By compiling directly to machine code","C":"Through the use of interpreters","D":"By using platform-specific libraries"},"answer_percentages":{"A":95.0,"B":1.0,"C":2.0,"D":2.0},"right_answer":"A","topic_name":"Java Platform Independence","description_and_explanation":"Java achieves platform independence through the use of the Java Virtual Machine (JVM), which allows Java programs to execute on different platforms. The JVM interprets the compiled Java bytecode into the machine code appropriate for the operating system it is running on.","difficulty_level":"Medium","pro_tip":"Always keep in mind the role of JVM when developing Java applications that are intended to run on multiple platforms.","fun_fact":"The phrase \'Write once, run anywhere\' was popularized by Sun Microsystems to illustrate the cross-platform benefits of Java."}'),
    json.decode('{"title":"Exception Handling in Java","question":"What is an exception in Java?","possible_answers":{"A":"A type of error that affects the runtime of a program","B":"An event that disrupts the normal flow of a program","C":"A method used to terminate a program","D":"A variable that stores intermediate results"},"answer_percentages":{"A":5.0,"B":90.0,"C":2.0,"D":3.0},"right_answer":"B","topic_name":"Exception Handling","description_and_explanation":"In Java, an exception is an event that disrupts the normal flow of the program\'s instructions. Exceptions provide a way to respond to exceptional circumstances (like runtime errors) in the program by transferring control to exception handlers.","difficulty_level":"Easy","pro_tip":"Effectively use exception handling to make your Java applications robust and to manage runtime errors smoothly.","fun_fact":"Java\'s exception handling is built upon the concept of exception objects, which encapsulates the information about an error including its type and the state of the program when the error occurred."}'),
    json.decode('{"title":"Equality in Java","question":"What is the difference between `==` and `.equals()` in Java?","possible_answers":{"A":"`==` checks for value equality and `.equals()` checks for reference equality","B":"`==` checks for reference equality and `.equals()` checks for value equality","C":"Both `==` and `.equals()` check for value equality","D":"Both `==` and `.equals()` check for reference equality"},"answer_percentages":{"A":2.0,"B":90.0,"C":5.0,"D":3.0},"right_answer":"B","topic_name":"Core Java","description_and_explanation":"In Java, `==` is used for checking reference equality, i.e., whether two references point to the same object or not. The `.equals()` method is used for checking value equality, i.e., whether two objects have the same value. This distinction is crucial for comparing objects properly in Java.","difficulty_level":"Medium","pro_tip":"Always use `.equals()` when checking for logical equality of objects and `==` for checking if two references point to the same object.","fun_fact":"By default, the `.equals()` method in the Object class checks for reference equality, but it is often overridden in subclasses to compare states (values)."}'),
    json.decode('{"title":"Java Annotations Overview","question":"What are Java annotations?","possible_answers":{"A":"Comments in the code to explain what the code does","B":"A form of metadata that provides data about a program but is not part of the program itself","C":"Error messages generated by the compiler","D":"Variables used to store data"},"answer_percentages":{"A":5.0,"B":85.0,"C":5.0,"D":5.0},"right_answer":"B","topic_name":"Java Annotations","description_and_explanation":"Java annotations are a form of metadata that provide data about the program but are not part of the program itself. They do not affect program execution but can be used to instruct the compiler or runtime environment to behave in a certain way, facilitate compile-time or deployment-time processing, or affect runtime behavior.","difficulty_level":"Medium","pro_tip":"Leverage annotations to simplify your Java code and reduce boilerplate, such as when specifying configuration in Spring or JPA.","fun_fact":"Annotations in Java were introduced in version 5.0 and are a key aspect of modern Java frameworks like Spring and Hibernate."}'),
    json.decode('{"title":"Lambda Expressions in Java","question":"What is a lambda expression in Java?","possible_answers":{"A":"A way to define methods in abstract classes","B":"A concise way to represent an instance of a functional interface","C":"A special variable type for storing lambdas","D":"An operator used for object creation"},"answer_percentages":{"A":5.0,"B":90.0,"C":2.0,"D":3.0},"right_answer":"B","topic_name":"Java 8 Features","description_and_explanation":"Lambda expressions in Java are a concise way to represent instances of functional interfaces (interfaces with a single abstract method). Introduced in Java 8, lambda expressions enable functional programming and simplify the implementation of functional interfaces using an expression.","difficulty_level":"Medium","pro_tip":"Use lambda expressions to make your code more readable and concise, especially when using features like streams and functional interfaces.","fun_fact":"Lambda expressions were one of the most anticipated features in Java 8, bringing a functional programming style to Java."}'),
    json.decode('{"title":"Memory Management in Java","question":"How can you manage memory in Java?","possible_answers":{"A":"By manually allocating and deallocating memory","B":"By using pointers","C":"By letting the Java Virtual Machine manage memory","D":"By using external libraries"},"answer_percentages":{"A":2.0,"B":3.0,"C":90.0,"D":5.0},"right_answer":"C","topic_name":"Memory Management","description_and_explanation":"In Java, memory management is predominantly handled by the Java Virtual Machine (JVM), which includes automatic garbage collection. This means that the programmer does not need to manually allocate or deallocate memory, which can help avoid memory leaks and other memory management errors.","difficulty_level":"Easy","pro_tip":"Understanding the JVM\'s garbage collection process can help you write more efficient Java code and troubleshoot memory-related issues more effectively.","fun_fact":"The garbage collector in Java works by identifying and disposing objects that are no longer being used, thus freeing up memory automatically."}'),
    json.decode('{"title":"Polymorphism in Java","question":"What is polymorphism in Java?","possible_answers":{"A":"The ability of a variable to store multiple types of data","B":"The ability of a function to perform different tasks based on the input","C":"The ability of a variable to change types","D":"The ability of an object to take on many forms"},"answer_percentages":{"A":5.0,"B":10.0,"C":5.0,"D":80.0},"right_answer":"D","topic_name":"Object-Oriented Programming","description_and_explanation":"Polymorphism in Java is the ability of an object to take on many forms. It is a core concept in object-oriented programming that allows actions to act differently based on the actual object that the action is being performed on. This is typically achieved through methods overriding and interface implementation.","difficulty_level":"Medium","pro_tip":"Utilize polymorphism to enhance flexibility and maintainability in your Java applications by using a single interface to represent multiple underlying forms (data types).","fun_fact":"The word \'polymorphism\' is derived from the Greek words \'poly\' (many) and \'morph\' (form)."}'),
    json.decode('{"title":"Java Interfaces","question":"What is the role of the `interface` keyword in Java?","possible_answers":{"A":"To declare a class","B":"To declare a type that other classes can implement","C":"To create a new thread","D":"To define a new method"},"answer_percentages":{"A":5.0,"B":85.0,"C":5.0,"D":5.0},"right_answer":"B","topic_name":"Interfaces","description_and_explanation":"In Java, the `interface` keyword is used to declare a type that other classes can implement, rather than extend. An interface can include abstract methods, default methods, and static methods. It provides a way to achieve abstraction and multiple inheritance in Java.","difficulty_level":"Medium","pro_tip":"Use interfaces to define a contract for what a class can do, without dictating how it should do it.","fun_fact":"Interfaces in Java are similar to protocols in other programming languages like Swift and Objective-C."}'),
    json.decode('{"title":"Thread Safety in Java","question":"How do you ensure thread safety in Java applications?","possible_answers":{"A":"By using synchronized blocks or methods","B":"By avoiding the use of threads","C":"By using only static methods","D":"By avoiding the use of variables"},"answer_percentages":{"A":90.0,"B":3.0,"C":2.0,"D":5.0},"right_answer":"A","topic_name":"Concurrency","description_and_explanation":"Thread safety in Java can be ensured by using synchronized blocks or methods to control the access of multiple threads to a shared resource. This prevents race conditions where two or more threads attempt to update mutable shared data at the same time.","difficulty_level":"Hard","pro_tip":"Consider using other concurrency mechanisms such as ReentrantLocks or atomic variables, in addition to synchronized, to manage complex multithreading scenarios more efficiently.","fun_fact":"Java\'s concurrency utilities were significantly expanded in Java 5 to include a variety of high-level synchronization aids."}'),
    json.decode('{"title":"Stream API in Java","question":"What is the `Stream` API in Java used for?","possible_answers":{"A":"To perform file operations","B":"To stream video and audio data","C":"To perform operations on collections of objects in a functional style","D":"To implement networking capabilities"},"answer_percentages":{"A":5.0,"B":5.0,"C":85.0,"D":5.0},"right_answer":"C","topic_name":"Java 8 Features","description_and_explanation":"The Stream API in Java, introduced in Java 8, is used to perform operations on collections of objects. It supports functional-style operations on streams of elements, such as map-reduce transformations on collections. It allows for complex operations on collections of data, such as filtering, sorting, or aggregating, in a declarative way.","difficulty_level":"Medium","pro_tip":"Use the Stream API to efficiently process large collections of data with minimal code and high readability.","fun_fact":"The introduction of the Stream API marked a major enhancement in Java, bringing it closer to functional programming paradigms."}')
  ];

  JavaQuestions._privateConstructor();
  static final JavaQuestions _instance = JavaQuestions._privateConstructor();

  factory JavaQuestions() {
    return _instance;
  }

  getNextQuestion() {
    index = (index == questions.length - 1) ? 0 : index + 1;
    return questions[index];
  }

  getNextQuestionsList(int count) {
    index = (index == questions.length - 1) ? 0 : index + 1;
    var questionsList = [];
    for(int i = index; i < count; i ++) {
      questionsList.add(questions[index]);
      index = (index == questions.length - 1) ? 0 : index + 1;
    }
    return questionsList;
  }
}

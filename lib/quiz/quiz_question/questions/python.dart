import 'dart:convert';

class PythonQuestions {
  int index = 0;

  List questions = [
    json.decode('{"title":"Understanding List Comprehensions","question":"What is a list comprehension in Python?","possible_answers":{"A":"A way to create lists based on existing lists","B":"A method to summarize list values","C":"A syntax to iterate over a list","D":"A technique to import multiple lists"},"answer_percentages":{"A":90.0,"B":3.0,"C":5.0,"D":2.0},"right_answer":"A","topic_name":"List Comprehension","description_and_explanation":"List comprehension provides a concise way to create lists. It consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The expressions can be anything, meaning you can put all kinds of objects in lists.","difficulty_level":"Medium","pro_tip":"Use list comprehensions instead of loops to write more concise and readable code.","fun_fact":"List comprehensions were inspired by set builder notation in mathematics."}'),
    json.decode('{"title":"Yield Keyword in Python","question":"What does the `yield` keyword do in Python?","possible_answers":{"A":"Pauses the loop and returns a result","B":"Stops the execution of the program","C":"Creates a new thread or process","D":"Declares a variable"},"answer_percentages":{"A":95.0,"B":1.0,"C":2.0,"D":2.0},"right_answer":"A","topic_name":"Generators","description_and_explanation":"The `yield` keyword is used in Python to make a function generate a series of values over time. The state of the function is saved from the last call and can be picked up the next time `yield` is called. This is used to generate sequences of values without using up memory storing the entire sequence.","difficulty_level":"Medium","pro_tip":"Utilize generators to handle large datasets that don\'t fit into memory, as generators yield items one at a time, consuming less memory.","fun_fact":"Generators are considered a cornerstone of efficient Pythonic code, especially when working with large data streams."}'),
    json.decode('{"title":"Class Method vs Static Method","question":"What is the difference between `@classmethod` and `@staticmethod` in Python?","possible_answers":{"A":"There is no difference; both decorators do the same thing","B":"`@classmethod` passes the class as the first argument while `@staticmethod` does not pass the class or instance","C":"`@staticmethod` passes the instance as the first argument while `@classmethod` does not","D":"`@classmethod` enhances the speed of method execution while `@staticmethod` does not"},"answer_percentages":{"A":5.0,"B":90.0,"C":3.0,"D":2.0},"right_answer":"B","topic_name":"Decorators","description_and_explanation":"The `@classmethod` decorator modifies a method to become a class method that receives the class itself as the first argument instead of an instance of that class. `@staticmethod`, on the other hand, does not take the class or instance as a parameter. This makes static methods behave like plain functions that happen to reside in a class\'s namespace.","difficulty_level":"Hard","pro_tip":"Use `@classmethod` to create factory methods. Factory methods return class objects (like a constructor) for different use cases.","fun_fact":"Decorators were introduced in Python 2.4, transforming how Python programmers write succinct and readable code."}'),
    json.decode('{"title":"Package Management with Pip","question":"How do you manage packages in Python?","possible_answers":{"A":"Using the `package` statement","B":"Using the `import` directive","C":"Using the `pip` tool","D":"Using the `py` tool"},"answer_percentages":{"A":2.0,"B":5.0,"C":90.0,"D":3.0},"right_answer":"C","topic_name":"Package Management","description_and_explanation":"Python uses `pip` as the package installer. It\'s a command-line tool that allows you to install, reinstall, or uninstall PyPI packages at the command line.","difficulty_level":"Easy","pro_tip":"Regularly update your packages with `pip install --upgrade` to keep your dependencies manageable and secure.","fun_fact":"`pip` stands for \'Pip Installs Packages\' or \'Pip Installs Python\'."}'),
    json.decode('{"title":"Python Constructors","question":"What is the use of the `__init__` method in Python classes?","possible_answers":{"A":"To initialize a newly created object","B":"To finalize an object before garbage collection","C":"To declare class-level attributes","D":"To start the execution of a program"},"answer_percentages":{"A":95.0,"B":1.0,"C":2.0,"D":2.0},"right_answer":"A","topic_name":"Class Basics","description_and_explanation":"The `__init__` method in Python is a special method called a constructor, which is called when an object is newly created. It\'s used to initialize the object\'s attributes with values at the time of creation, ensuring that the object is in a good state when it is used later.","difficulty_level":"Easy","pro_tip":"Always define an `__init__` method in your classes to initialize objects with default or user-defined states.","fun_fact":"The `__init__` method is so fundamental in Python that it\'s one of the first concepts taught in object-oriented programming in Python."}'),
    json.decode('{"title":"Using the Pass Statement","question":"What is the purpose of the `pass` statement in Python?","possible_answers":{"A":"To terminate a loop or conditional block","B":"To occupy a space where no action is required but syntax requires a statement","C":"To pass control to another function","D":"To indicate passing a test"},"answer_percentages":{"A":5.0,"B":90.0,"C":2.0,"D":3.0},"right_answer":"B","topic_name":"Control Flow","description_and_explanation":"The `pass` statement in Python is used as a placeholder for future code. When the `pass` statement is executed, nothing happens, but it avoids a syntax error when empty code is not allowed. This can be useful, for example, in defining a class with no methods initially.","difficulty_level":"Easy","pro_tip":"Use `pass` as a place-holder in areas of your code where logic will be implemented later.","fun_fact":"The `pass` statement is a unique feature in Python, often used as a temporary placeholder during development."}'),
    json.decode('{"title":"Improving Python Code Readability","question":"How can you improve the readability of Python code?","possible_answers":{"A":"Using complex expressions","B":"Writing longer functions","C":"Following the PEP 8 style guide","D":"Limiting comments in the code"},"answer_percentages":{"A":2.0,"B":3.0,"C":90.0,"D":5.0},"right_answer":"C","topic_name":"Coding Standards","description_and_explanation":"Following the PEP 8 style guide helps improve the readability and consistency of Python code. PEP 8 provides a set of rules for formatting Python code to make it more readable and beautiful.","difficulty_level":"Easy","pro_tip":"Adopt PEP 8 guidelines in your coding practices to maintain a high standard of readability and maintainability across your Python projects.","fun_fact":"PEP stands for Python Enhancement Proposal, and PEP 8 is one of the oldest and most referenced PEPs."}'),
    json.decode('{"title":"Lambda Functions in Python","question":"What are lambda functions in Python?","possible_answers":{"A":"Functions that are defined without a name","B":"Functions that can return multiple values","C":"Functions that are only used in lambda calculus","D":"Functions that cannot be reused"},"answer_percentages":{"A":95.0,"B":1.0,"C":2.0,"D":2.0},"right_answer":"A","topic_name":"Functional Programming","description_and_explanation":"Lambda functions in Python are small anonymous functions defined with the lambda keyword. Lambda functions can have any number of arguments but only one expression. They are syntactically restricted to a single expression. Using lambda functions can make your code concise and readable, especially when used for short, simple functions.","difficulty_level":"Medium","pro_tip":"Use lambda functions when you require a simple function for a short duration and you are interested in minimizing lines of code.","fun_fact":"Lambda functions are derived from the concept of lambda calculus in computer science, which is used for abstracting and evaluating function definitions."}'),
    json.decode('{"title":"Deep vs Shallow Copy","question":"What is the difference between deep and shallow copy in Python?","possible_answers":{"A":"Deep copy duplicates collections recursively, shallow copy does not","B":"Shallow copy duplicates collections recursively, deep copy does not","C":"Deep copy is faster than shallow copy","D":"Shallow copy allows changes to the original object, deep copy does not"},"answer_percentages":{"A":90.0,"B":5.0,"C":2.0,"D":3.0},"right_answer":"A","topic_name":"Data Types and Structures","description_and_explanation":"A deep copy creates a new compound object and then, recursively, inserts copies into it of the objects found in the original. A shallow copy constructs a new compound object and then inserts references into it to the objects found in the original. A deep copy is completely independent of the original object, whereas a shallow copy is not.","difficulty_level":"Hard","pro_tip":"Use a deep copy when you need to duplicate objects that contain other objects, such as lists or custom objects, to prevent side-effects from changes to the copied structure.","fun_fact":"Copying complex objects like lists or custom classes can be nuanced, which is why Python provides the `copy` module to handle these operations efficiently."}'),
    json.decode('{"title":"Script Immutability in Python","question":"How do you ensure that a Python script is immutable?","possible_answers":{"A":"By writing the script in uppercase","B":"By declaring all variables at the start","C":"By using the `immutable` keyword","D":"You cannot make a Python script immutable"},"answer_percentages":{"A":2.0,"B":2.0,"C":1.0,"D":95.0},"right_answer":"D","topic_name":"Scripting Essentials","description_and_explanation":"In Python, the notion of immutability does not apply to scripts but to data types. Some objects like strings, tuples, and frozensets are immutable, meaning their content cannot be altered after creation. However, scripts themselves, being sequences of commands, cannot be made immutable.","difficulty_level":"Medium","pro_tip":"Understand and utilize immutable data types in Python to ensure data integrity and predictability in your functions.","fun_fact":"Immutable objects are often easier to reason about due to their constant state after creation, making them critical in multi-threaded environments where mutable data types could lead to data races and bugs."}')
  ];

  PythonQuestions._privateConstructor();
  static final PythonQuestions _instance = PythonQuestions._privateConstructor();

  factory PythonQuestions() {
    return _instance;
  }

  getNextQuestion() {
    index = (index == questions.length - 1) ? 0 : index + 1;
    return questions[index];
  }

  getNextQuestionsList(int count) {
    index = (index == questions.length - 1) ? 0 : index + 1;
    var questionsList = [];
    for(int i = index; i < count; i ++) {
      questionsList.add(questions[index]);
      index = (index == questions.length - 1) ? 0 : index + 1;
    }
    return questionsList;
  }
}